{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ranks","suits","generateNewBoard","totalCards","Array","keys","map","value","sort","Math","random","a","b","groupBoardIndicesIntoRows","cardsPerRow","rows","i","push","floor","MemoryCard","props","onClick","isClickable","onCardClicked","cardIndex","undefined","card","cardNum","numRanks","height","style","isSelected","back","Game","useState","firstSelection","setFirstSelection","secondSelection","setSecondSelection","matched","setMatched","clearSelections","newTurnsTaken","turnsTaken","playerMoving","setTurnsTaken","setPlayerMoving","card1","card2","requireColorMatch","ranksMatch","card1Suit","card2Suit","isMatch","board","newMatches","newMatchesFound","matchesFound","setMatchesFound","every","setGameOver","setTimeout","max","row","idx","className","cardIdx","App","setBoard","fill","setRows","gameOver","setRequireColorMatch","showBoard","setShowBoard","setNumRanks","numSuits","setNumSuits","display","onChange","e","target","length","val","type","checked","_","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9553bef7.chunk.js","sourcesContent":["import './App.css';\nimport React, {useState} from 'react'\nimport Card from \"@heruka_urgyen/react-playing-cards/lib/TcB\"\n\nconst ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"T\", \"J\", \"Q\", \"K\", \"A\"]\nconst suits = [\"c\", \"s\", \"h\", \"d\"]\n\n/* Generates and shuffles an array containing 0..51 using a Schwartzian transform.\n * Note: an inside-out Fisher-Yates shuffle would improve this from O(nlogn) to O(n). But I find this more readable and 52 isn't many.\n * See https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n */\nfunction generateNewBoard(totalCards) {\n  return [...Array(totalCards).keys()]\n    .map((value) => ({value, sort: Math.random()}))\n    .sort((a, b) => a.sort - b.sort)\n    .map(({value}) => value);\n}\n\nfunction groupBoardIndicesIntoRows(cardsPerRow, totalCards) {\n  var rows = [];\n  for (var i = 0; i < totalCards; ++i) {\n    if (i % cardsPerRow === 0) {\n      rows.push([]);\n    }\n    var row = Math.floor(i / cardsPerRow);\n    rows[row].push(i);\n  }\n  return rows;\n}\n\nfunction isMatch(card1, card2, requireColorMatch, numRanks) {\n  var ranksMatch = (card1 % numRanks) === (card2 % numRanks);\n  if (!requireColorMatch) {\n    return ranksMatch;\n  }\n  var card1Suit = Math.floor(card1 / numRanks);\n  var card2Suit = Math.floor(card2 / numRanks);\n  var colorsMatch = (card1Suit + card2Suit) === 1 || (card1Suit + card2Suit) === 5;\n  return ranksMatch && colorsMatch;\n}\n\nfunction MemoryCard(props) {\n  return (\n    <div onClick={props.isClickable ? () => props.onCardClicked(props.cardIndex) : undefined} >\n      <Card\n        card={ranks[props.cardNum % props.numRanks] + suits[Math.floor(props.cardNum / props.numRanks)]}\n        height=\"100px\"\n        style={props.isSelected ? {\"border\": \"5px solid #555\"} : {\"padding\": \"5px\"}}\n        back={props.isClickable && !props.isSelected}/>\n    </div>\n  );\n}\n\nfunction Game(props) {\n  const [firstSelection, setFirstSelection] = useState(undefined);\n  const [secondSelection, setSecondSelection] = useState(undefined);\n\n  var matched = props.matched;\n  var setMatched = props.setMatched;\n  var clearSelections = function() {\n    setFirstSelection(undefined);\n    setSecondSelection(undefined);\n  };\n\n  var onCardClicked = function(cardIndex) {\n    if (firstSelection === undefined) {\n      setFirstSelection(cardIndex);\n    } else if (secondSelection === undefined) {\n      setSecondSelection(cardIndex);\n      var newTurnsTaken = [...props.turnsTaken];\n      newTurnsTaken[props.playerMoving]++;\n      props.setTurnsTaken(newTurnsTaken);\n      props.setPlayerMoving((props.playerMoving + 1) % 2);\n\n      // if match\n      if (isMatch(props.board[firstSelection], props.board[cardIndex], props.requireColorMatch, props.numRanks)) {\n        var newMatches = [...matched];\n        newMatches[firstSelection] = true;\n        newMatches[cardIndex] = true;\n        setMatched(newMatches);\n\n        var newMatchesFound = [...props.matchesFound];\n        newMatchesFound[props.playerMoving]++;\n        props.setMatchesFound(newMatchesFound);\n\n        // if game over\n        if (newMatches.every(matched => matched)) {\n          props.setGameOver(true);\n        }\n        clearSelections();\n      } else {\n        // if not match\n        setTimeout(clearSelections, 1500);\n      }\n    }\n  };\n\n  var isClickable = function(cardIndex) {\n    return !matched[cardIndex] && (cardIndex !== firstSelection) && (cardIndex !== secondSelection);\n  }\n\n  var isSelected = cardIndex => cardIndex === firstSelection || cardIndex === secondSelection;\n  \n  return (\n    <div>\n      <label>Player {props.playerMoving + 1}'s turn</label><br/>\n      <label>Player 1 Turns taken: {props.turnsTaken[0]}, matches found: {props.matchesFound[0]}, success rate: {(1.0 * props.matchesFound[0]) / Math.max(props.turnsTaken[0], 1)}</label><br/>\n      <label>Player 2 Turns taken: {props.turnsTaken[1]}, matches found: {props.matchesFound[1]}, success rate: {(1.0 * props.matchesFound[1]) / Math.max(props.turnsTaken[1], 1)}</label>\n      {props.rows.map((row, idx) =>\n        <ul key={idx} className=\"cards\">\n          {row.map(cardIdx =>\n            <li key={cardIdx}>\n              <MemoryCard\n                cardNum={props.board[cardIdx]}\n                cardIndex={cardIdx}\n                onCardClicked={onCardClicked}\n                isClickable={isClickable(cardIdx)}\n                isSelected={isSelected(cardIdx)}\n                numRanks={props.numRanks}/>\n            </li>\n          )}\n        </ul>)}\n    </div>\n  );\n}\n\nfunction App() {\n  const [board, setBoard] = useState(generateNewBoard(52));\n  const [matched, setMatched] = useState(Array(52).fill(false));\n  const [rows, setRows] = useState(groupBoardIndicesIntoRows(13, 52));\n  const [gameOver, setGameOver] = useState(true);\n  const [requireColorMatch, setRequireColorMatch] = useState(true);\n  const [showBoard, setShowBoard] = useState(false);\n  const [numRanks, setNumRanks] = useState(13);\n  const [numSuits, setNumSuits] = useState(4);\n  const [turnsTaken, setTurnsTaken] = useState(Array(2).fill(0));\n  const [matchesFound, setMatchesFound] = useState(Array(2).fill(0));\n  const [playerMoving, setPlayerMoving] = useState(0);\n\n  var startNewGame = function() {\n    setBoard(generateNewBoard(numRanks * numSuits));\n    setMatched(Array(numRanks * numSuits).fill(false));\n    setRows(groupBoardIndicesIntoRows(numRanks, numSuits * numRanks));\n    setGameOver(false);\n    setShowBoard(true);\n    setTurnsTaken(Array(2).fill(0));\n    setMatchesFound(Array(2).fill(0));\n    setPlayerMoving(0);\n  }\n\n  return (\n    <div className=\"App\">\n      <div style={{display: gameOver ? \"block\" : \"none\"}}>\n        <h1>Configuration</h1>\n        <label>\n          <select value={numSuits} onChange={e => setNumSuits(e.target.value)}>\n            <option value=\"2\">2</option>\n            <option value=\"4\">4</option>\n          </select>\n          Number of Suits\n        </label><br/>\n        <label>\n          <select value={numRanks} onChange={e => setNumRanks(e.target.value)}>\n            {[...Array(ranks.length).keys()].map(val =>\n              <option key={val+1} value={val+1}>{val+1}</option>)}\n          </select>\n          Number of Ranks\n        </label><br/>\n        <div style={{display: numSuits === 4 ? \"block\" : \"none\"}}>\n          <label>\n            <input type=\"checkbox\" checked={requireColorMatch} onChange={_ => setRequireColorMatch(!requireColorMatch)}/>\n            Require Color Match\n          </label><br/>\n        </div>\n        <button onClick={startNewGame}>\n          New Game\n        </button>\n      </div>\n      <div style={{display: showBoard ? \"block\" : \"none\"}}>\n        <Game \n          rows={rows} \n          board={board} \n          setGameOver={setGameOver} \n          requireColorMatch={requireColorMatch} \n          numRanks={numRanks} \n          numSuits={numSuits}\n          matched={matched}\n          setMatched={setMatched}\n          turnsTaken={turnsTaken}\n          setTurnsTaken={setTurnsTaken}\n          matchesFound={matchesFound}\n          setMatchesFound={setMatchesFound}\n          playerMoving={playerMoving}\n          setPlayerMoving={setPlayerMoving} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}